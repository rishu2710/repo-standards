name: PR and Commit Message Validation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 1Ô∏è‚É£ PR title & description validation
      - name: Validate PR title and description
        run: |
          echo "üîç Validating PR title and description..."
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"

          if [ -z "$PR_TITLE" ] || [ -z "$PR_BODY" ]; then
            echo "‚ùå PR title or description is missing."
            exit 1
          fi

          echo "‚úÖ PR title and description are valid."

      # 2Ô∏è‚É£ Commit message validation for dev-1.0.0-* branches
      - name: Validate commit messages for developer branch
        run: |
          BRANCH_NAME="${GITHUB_HEAD_REF:-$(git rev-parse --abbrev-ref HEAD)}"
          echo "Current branch: $BRANCH_NAME"

          # Check if branch matches dev-1.0.0-<developername>
          if [[ ! "$BRANCH_NAME" =~ ^dev-1\.0\.0-[a-zA-Z0-9_-]+$ ]]; then
            echo "‚ÑπÔ∏è Skipping commit message validation (branch does not match dev-1.0.0-<developername> format)"
            exit 0
          fi

          echo "üîç Validating commit messages in branch: $BRANCH_NAME"
          git fetch origin $BRANCH_NAME || true

          # Get commits in PR range
          COMMITS=$(git log --format=%s origin/${{ github.event.pull_request.base.ref }}..HEAD)

          if [ -z "$COMMITS" ]; then
            echo "‚ö†Ô∏è No new commits found to validate."
            exit 0
          fi

          while read -r COMMIT_MSG; do
            [ -z "$COMMIT_MSG" ] && continue

            echo "Checking: $COMMIT_MSG"

            # Length check (>50 characters)
            if [ ${#COMMIT_MSG} -le 50 ]; then
              echo "‚ùå Commit message must be more than 50 characters."
              exit 1
            fi

            # Task ID format check
            if ! echo "$COMMIT_MSG" | grep -qE '#[0-9]{5,7}'; then
              echo "‚ùå Commit message must include a task ID in format: #<5‚Äì7 digits>"
              exit 1
            fi

          done <<< "$COMMITS"

          echo "‚úÖ All commit messages passed checks."
